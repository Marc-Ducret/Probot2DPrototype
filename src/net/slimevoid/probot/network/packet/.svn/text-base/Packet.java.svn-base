package net.slimevoid.rpg.network.packet;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import net.slimevoid.rpg.network.LittleEndianConverter;

/**
 * Classe qui représente un packet, qui en contient les données et qui intéragit avec les streams pour envoyer ces données. C'est une classe abstraite qui a pour seule vocation d'être héritée une fois par type de packet.
 * @author Marc
 */
public abstract class Packet {

    /**
     * L'identifiant du packet
     */
    private final int packetId;

    /**
     * La Map pour retrouver les classes à partir de leur identifiant
     */
    private static Map<Integer, Class<? extends Packet>> idToPacketType = new HashMap<Integer, Class<? extends Packet>>();

    public Packet() {
        packetId = getPacketIdBasedOnClass();
    }

    /**
     * Cette fonction est appelée quand le packet est "lu". Il faut "lire" toutes les données "écrite" dans la fonction write.
     * @param in : L'InputStream qui contiens les données
     * @throws IOException
     */
    public abstract void read(DataInputStream in) throws IOException;

    /**
     * Cette fonction est appelée quand le packet est "écrit". Il faut "lire" toutes les données qui vont être "lues" dans la fonction read.
     * @param out : L'OutputStream où l'on doit "écrire"
     * @throws IOException
     */
    public abstract void write(DataOutputStream out) throws IOException;

    /**
     * @return {@link #packetId} à partir de la classe en utilisant {@link #idToPacketType}
     */
    private int getPacketIdBasedOnClass() {
        Class<? extends Packet> classe = this.getClass();
        for(Entry<Integer, Class<? extends Packet>> entry : idToPacketType.entrySet()) {
            if(entry.getValue() == classe) {
                return entry.getKey();
            }
        }
        return -1;
    }

    /**
     * Crée un packet corespondant au type spécifié par l'indentifiant
     * @param id L'indentifiant représentant un type de packet
     * @return Le packet crée
     */
    public static Packet createPacket(int id) {
        if(!idToPacketType.containsKey(id)) {
            throw new IllegalArgumentException("packet "+id+" unregistered");
        }
        Class<? extends Packet> packetClass = idToPacketType.get(id);
        try {
            return packetClass.newInstance();
        } catch (Exception e) {
            throw new RuntimeException("An excepetion is preventing a packet from being created", e);
        }
    }

    /**
     * Ajoute le type de packet spécifié à {@link #idToPacketType} ce qui est nécésaire pour qu'il soit utilisable.
     * @param id : L'indentifiant du type packet
     * @param classe : La classe du type de packet
     */
    private static void registerPacket(int id, Class<? extends Packet> classe) {
        idToPacketType.put(id, classe);
    }

    public static void registerPackets() {
        registerPacket( 0, Packet00KeepAlive.class);
        registerPacket( 1, Packet01Login.class);
        registerPacket( 2, Packet02Error.class);
        registerPacket( 3, Packet03Action.class);
        registerPacket( 4, Packet04GameRequest.class);
        registerPacket( 5, Packet05GameInfo.class);
        registerPacket( 6, Packet06GameConclusion.class);
        registerPacket( 7, Packet07Chat.class);
        registerPacket( 8, Packet08PlayerInfo.class);
        registerPacket( 9, Packet09HatAction.class);
    }

    static {
        registerPackets();
    }
    
    private final boolean needToConvertEndian = false;
    public double readDouble(DataInputStream in) throws IOException {
		return Double.longBitsToDouble(readLong(in));
	}
	
	public long readLong(DataInputStream in) throws IOException {
		return needToConvertEndian ? LittleEndianConverter.readLittleEndianLong(in) : in.readLong();
	}
	
	public int readInt(DataInputStream in) throws IOException {
		return needToConvertEndian ? LittleEndianConverter.readLittleEndianInt(in) : in.readInt();
	}
	
	public String readString(DataInputStream in) throws IOException {
		if(needToConvertEndian) {
			int size = readInt(in);
			byte[] buf = new byte[size];
			in.readFully(buf);
			return new String(buf);
		} else {
			return in.readUTF();
		}
	}
	
//	public String writeString(DataOutputStream out, String str) throws IOException {
//		if(needToConvertEndian) {
//			writeInt(out, str.length());
//			for(char c : str) {
//			}
//			byte[] buf = new byte[size];
//			in.readFully(buf);
//			return new String(buf);
//		} else {
//			return in.readUTF();
//		}
//	}
	
	public void writeDouble(DataOutputStream out, double d) throws IOException {
		writeLong(out, Double.doubleToLongBits(d));
	}
	
	public void writeLong(DataOutputStream out, long l) throws IOException {
		if(needToConvertEndian) {
			LittleEndianConverter.writeLittleEndianLong(out, l);
		} else {
			out.writeLong(l);
		}
	}
	
	public void writeInt(DataOutputStream out, int i) throws IOException {
		if(needToConvertEndian) {
			LittleEndianConverter.writeLittleEndianInt(out, i);
		} else {
			out.writeInt(i);
		}
	}

    /**
     * @return {@link #packetId}
     */
    public int getPacketId() {
        return packetId;
    }
}